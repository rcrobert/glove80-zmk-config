
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
    behaviors {
        // Define my preferred hold taps for homerow mods.
        // - Emulate the QMK IGNORE_MOD_TAP_INTERRUPT behavior.
        //   See https://zmk.dev/docs/behaviors/hold-tap#comparison-to-qmk
        // - Enable quick tap.
        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    
    macros {
        dash_arrow: dash_arrow {
            label = "ZM_dash_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp GREATER_THAN>;
        };

        equal_arrow: equal_arrow {
            label = "ZM_equal_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp GREATER_THAN>;
        };
    };


    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
     &kp F1       &kp F2       &kp F3        &kp F4        &kp F5                                                                                              &kp F6        &kp F7       &kp F8          &kp F9    &kp F10
  &kp EQUAL       &kp N1       &kp N2        &kp N3        &kp N4  &kp N5                                                                        &kp N6        &kp N7        &kp N8       &kp N9          &kp N0  &kp MINUS
    &kp TAB        &kp Q        &kp W         &kp E         &kp R   &kp T                                                                         &kp Y         &kp U         &kp I        &kp O           &kp P   &kp BSLH
    &kp ESC  &hrm LGUI A  &hrm LALT S  &hrm LCTRL D  &hrm LSHFT F   &kp G                                                                         &kp H  &hrm LSHFT J  &hrm LCTRL K  &hrm LALT L  &hrm LGUI SEMI    &kp SQT
  &kp GRAVE        &kp Z        &kp X         &kp C         &kp V   &kp B     &kp LSHFT    &kp LCTRL     &none  &kp LGUI  &kp RCTRL   &kp RSHFT   &kp N         &kp M     &kp COMMA      &kp DOT        &kp FSLH  &kp PG_UP
 &magic 2 0     &kp HOME      &kp END      &kp LEFT     &kp RIGHT           &lt 1 SPACE   &lt 2 BSPC  &kp LALT  &kp RALT    &kp TAB   &lt 3 RET                &kp UP      &kp DOWN     &kp LBKT        &kp RBKT  &kp PG_DN
            >;
        };

        layer_Numbers {
            bindings = <
     &trans     &none     &none      &none      &none                                                                        &trans  &trans  &trans    &trans  &trans
     &trans     &none     &none      &none      &none   &none                                                        &trans  &trans  &trans  &trans    &trans  &trans
     &trans     &none     &none      &none      &none   &none                                                     &kp EQUAL  &kp N7  &kp N8  &kp N9    &trans  &trans
     &trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                                     &kp MINUS  &kp N4  &kp N5  &kp N6  &kp PLUS  &trans
     &trans     &none     &none      &none      &none   &none  &trans  &trans  &trans  &trans    &trans   &trans     &kp N0  &kp N1  &kp N2  &kp N3    &trans  &trans
 &magic 2 0    &trans    &trans     &trans     &trans          &trans  &trans  &trans  &trans  &kp SEMI  &kp DOT             &trans  &trans  &trans    &trans  &trans
            >;
        };

        layer_Navigation {
            bindings = <
 &trans    &trans    &trans     &trans     &trans                                                                        &bt_0      &bt_1      &bt_2   &bt_3 &BT_CLR
 &trans    &trans    &trans     &trans     &trans  &trans                                                     &none      &none      &none      &none   &none &out OUT_USB
 &trans    &trans    &trans     &trans     &trans  &trans                                                    &trans     &trans     &trans      &none   &none   &none
 &trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                                                  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT   &none  &trans
 &trans    &trans    &trans     &trans     &trans  &trans  &trans  &trans  &trans   &none   &none   &none  &kp HOME  &kp PG_DN  &kp PG_UP    &kp END   &none  &trans
 &trans    &trans    &trans     &trans     &trans          &trans  &trans  &trans   &none   &none   &none                &none      &none      &none   &none  &trans
            >;
        };

        layer_Symbols {
            bindings = <
 &trans  &trans     &trans    &trans     &trans                                                                                      &trans     &trans    &trans    &trans  &trans
 &trans  &trans     &trans    &trans     &trans        &trans                                                             &trans     &trans     &trans    &trans    &trans  &trans
 &trans  &trans     &kp LT  &kp LBKT   &kp RBKT        &kp GT                                                             &trans     &trans     &trans    &trans    &trans  &trans
 &trans  &trans    &kp SQT  &kp LPAR   &kp RPAR   &dash_arrow                                                             &trans  &kp RSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
 &trans  &trans  &kp TILDE  &kp SEMI  &kp GRAVE  &equal_arrow     &trans          &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans  &trans
 &trans  &trans     &trans    &trans     &trans                &kp MINUS  &kp UNDERSCORE  &trans  &trans  &trans  &trans             &trans     &trans    &trans    &trans  &trans
            >;
        };

    };
};
